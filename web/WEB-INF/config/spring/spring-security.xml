<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns="http://www.springframework.org/schema/security"
             xsi:schemaLocation="http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">
    <beans:import resource="mysql-datasource.xml"/>

    <http auto-config="true" use-expressions="true">
        <!--        <csrf disabled="true"/>-->
        <access-denied-handler error-page="/accessDenied"/>

        <intercept-url pattern="/user/**" access="hasRole('USER')"/>
        <!--        <intercept-url pattern="/user" access="isAuthenticated()"/>-->

        <intercept-url pattern="/admin/**" access="hasRole('ADMIN')"/>

        <form-login login-page='/login'
                    login-processing-url="/check_user"
                    default-target-url="/user"
                    authentication-failure-url="/login?error=true"
                    username-parameter="user_login"
                    password-parameter="password_login"/>

        <logout logout-success-url='/login' delete-cookies="JSESSIONID"/>

        <!--        <remember-me key="uniqueAndSecret"/>-->
        <!--        data-source-ref="dataSource"-->
        <remember-me token-validity-seconds="1209600" remember-me-parameter="remember-me" data-source-ref="dataSource"/>
    </http>

    <!--    <http auto-config="true" use-expressions="true">
            <intercept-url pattern="/**" access="hasRole('ADMIN')"/>
        </http>-->

    <beans:bean id="jdbcGroupsImpl" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">

        <beans:property name="enableGroups" value="true"/>
        <beans:property name="enableAuthorities" value="false"/>
        <beans:property name="dataSource" ref="dataSource"/>
        <beans:property name="groupAuthoritiesByUsernameQuery" value="
        select g.id, g.group_name, ga.authority
            from `groups` g, group_members gm, group_authorities ga
            where gm.username = ? and g.id = ga.group_id
            and g.id = gm.group_id;"/>


    </beans:bean>

    <!--    https://my.su/5lx1k -->
    <!--    https://www.harinathk.com/spring/no-passwordencoder-mapped-id-null/ -->
    <!--    https://howtodoinjava.com/spring-security/jdbc-user-service-based-spring-security-example/ -->
    <!--    https://stackoverflow.com/questions/50379839/connection-java-mysql-public-key-retrieval-is-not-allowed -->

    <authentication-manager alias="authenticationManager">
        <authentication-provider user-service-ref="jdbcGroupsImpl">
            <password-encoder ref="bCryptPasswordEncoder"/>

            <!--                <user-service>
                                <user name="user" password="{noop}user" authorities="ROLE_USER"/>
                                <user name="admin" password="{noop}admin" authorities="ROLE_USER, ROLE_ADMIN"/>
                            </user-service>-->

            <!--            <jdbc-user-service data-source-ref="dataSource"
                                           users-by-username-query="
                                           select username, password, enabled from users
                                           where username=?;"
                                           authorities-by-username-query="Select username, concat('ROLE_',authority) authority from authorities
                                           where username=?;"/>-->
            <!--            <jdbc-user-service data-source-ref="dataSource"
                                           users-by-username-query="
                     SELECT USERNAME, PASSWORD, CASE ENABLED WHEN 1 THEN 'true' ELSE 'false' END 'ENABLED'
                     FROM users
                     WHERE USERNAME=?;"
                                           authorities-by-username-query="
                    SELECT u.USERNAME, r.authority
                    FROM users u, authorities r
                    WHERE u.username = r.username
                    AND u.USERNAME=?;"
                        />-->
            <!--            <jdbc-user-service data-source-ref="dataSource" group-authorities-by-username-query="
                        select g.id, g.group_name, ga.authority
                        from `groups` g, group_members gm, group_authorities ga
                        where gm.username = ? and g.id = ga.group_id
                        and g.id = gm.group_id;"/>-->

        </authentication-provider>
    </authentication-manager>

    <!-- ?useSSL=false&amp;allowPublicKeyRetrieval=true -->
    <!--    <beans:bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">

            <beans:property name="driverClassName" value="com.mysql.jdbc.Driver"/>
            <beans:property name="url"
                            value="jdbc:mysql://localhost:3306/spring_sequrity?useSSL=false"/>
            <beans:property name="username" value="admin"/>
            <beans:property name="password" value="password"/>
        </beans:bean>-->

    <!--    <beans:bean id="userDetailsManager" class="org.springframework.security.provisioning.JdbcUserDetailsManager">

            <beans:property name="dataSource" ref="dataSource"/>

        </beans:bean>-->

    <beans:bean id="passwordEncoder" class="org.springframework.security.crypto.password.NoOpPasswordEncoder"
                factory-method="getInstance"/>

        <beans:bean id="bCryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
        <beans:constructor-arg name="strength" value="12"/>
    </beans:bean>
    <!--    <jdbc:embedded-database id="dataSource"/>-->
</beans:beans>